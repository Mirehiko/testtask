{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/message.service.ts","webpack:///src/app/task-detail/task-detail.component.ts","webpack:///src/app/task-detail/task-detail.component.html","webpack:///src/app/task.service.ts","webpack:///src/app/task/task.component.ts","webpack:///src/app/task/task.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DashboardComponent","taskService","tasks","sortKey","sortWay","page","getTasks","params","subscribe","data","console","log","results","pageData","task","selectedTask","onClose","MessageService","messages","message","push","providedIn","TaskDetailComponent","route","location","taskChange","emit","updateTask","TaskService","http","messageService","taskUrl","createURL","updateURL","removeURL","httpOptions","headers","options","set","get","url","post","TaskComponent","filter","h","deleteTask","taskTitle","taskDescribe","taskUser","taskEmail","newtask","description","user","email","addTask","key","isInserting","onInsert","sort","environment","production","catch","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TaskComponent } from './task/task.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { TaskDetailComponent } from './task-detail/task-detail.component';\n\nconst routes: Routes = [\n\t{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\t{ path: 'dashboard', component: DashboardComponent },\n\t{ path: 'tasklist', component: TaskComponent },\n\t{ path: 'detail/:id', component: TaskDetailComponent },\n];\n\n@NgModule({\n\timports: [RouterModule.forRoot(routes)],\n\texports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Менеджер задач';\n}\n","<header>\n\t<nav class=\"menu mainMenu\">\n\t\t<!-- <div class=\"menu__item menuBrand\">\n\t    \t<a routerLink=\"/\" class=\"menuItem__content\">\n\t    \t\t<i class=\"fas fa-home\"></i>\n\t    \t</a>\n\t    </div> -->\n\t\t<div class=\"menu__item\">\n\t\t\t<a routerLink=\"/dashboard\" class=\"menuItem__content\">Главная</a>\n\t\t</div>\n\t\t<div class=\"menu__item\">\n\t\t\t<a routerLink=\"/tasklist\" class=\"menuItem__content\">Задачи</a>\n\t\t</div>\n\t</nav>\n</header>\n\n<main>\n\t<h1 class=\"pageTitle\">{{ title }}</h1>\n\t<router-outlet></router-outlet>\n</main>\n\n<!-- <app-messages></app-messages> -->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\n// import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\n// import { InMemoryDataService } from './in-memory-data.service';\n\nimport { AppComponent } from './app.component';\nimport { TaskComponent } from './task/task.component';\nimport { TaskDetailComponent } from './task-detail/task-detail.component';\n// import { MessagesComponent } from './messages/messages.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TaskComponent,\n    TaskDetailComponent,\n    // MessagesComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    // HttpClientInMemoryWebApiModule.forRoot(InMemoryDataService, {\n    //   dataEncapsulation: false\n    // })\n  ],\n  providers: [],\n  // providers: [{provide: APP_BASE_HREF, useValue : '/' }]\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Task } from '../task';\nimport { Page } from '../page';\nimport { TaskService } from '../task.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  tasks: Task[] = [];\n  selectedTask: Task;\n  pageData: Page;\n  sortKey = 'title';\n  sortWay = 'inc';\n  page = 1;\n\n  constructor(private taskService: TaskService) { }\n\n  ngOnInit(): void {\n    this.getTasks();\n  }\n\n  getTasks(): void {\n    const params = {\n      page: this.page,\n      sortKey: this.sortKey,\n      sortWay: this.sortWay\n    };\n    this.taskService.getTasks(params).subscribe((data) => {\n      console.log(data);\n      this.tasks = data.results;\n      this.pageData = data;\n    });\n  }\n\n  onSelect(task: Task): void {\n    this.selectedTask = task;\n    // this.messageService.add(`TaskService: Selected task id=${task.id}`);\n  }\n\n  onClose(): void {\n    this.selectedTask = null;\n  }\n}\n","<section>\n\t<h1>Основные задачи</h1>\n\t<nav class=\"taskInfo\">Выполнено: 0/3</nav>\n\t<div class=\"task\" *ngFor=\"let task of tasks\">\n\t\t<div class=\"taskValue taskState\"><input type=\"checkbox\"></div>\n\t\t<span class=\"taskValue taskTitle\">{{ task.title }}</span>\n\t\t<div class=\"taskValue taskControl\">\n\t\t\t<button type=\"button\" class=\"taskDetails\" (click)=\"onSelect(task)\">-></button>\n\t\t\t<!-- <a type=\"button\" class=\"taskDetails\" routerLink=\"/detail/{{ task.id }}\">-></a> -->\n\t\t</div>\n\t</div>\n</section>\n\n<!-- commint on link -->\n<app-task-detail [task]=\"selectedTask\" (taskChange)=\"onClose()\"></app-task-detail>","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n// for work with link\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\n\nimport { Task } from '../task';\nimport { TaskService } from '../task.service';\n\n@Component({\n  selector: 'app-task-detail',\n  templateUrl: './task-detail.component.html',\n  styleUrls: ['./task-detail.component.scss']\n})\nexport class TaskDetailComponent implements OnInit {\n  @Input() task: Task; // old\n  @Output() taskChange: EventEmitter<any> = new EventEmitter<any>();\n  // task: Task;//for link\n\n  // constructor() {}\n  // for link\n  constructor(\n    private route: ActivatedRoute,\n    private taskService: TaskService,\n    private location: Location\n  ) { }\n\n  ngOnInit(): void { } // old\n  // ngOnInit(): void {//for link\n  //   this.getTask();\n  // }\n\n  // getTask(): void {//for link\n  //   const id = +this.route.snapshot.paramMap.get('id');\n  //   this.taskService.getTask(id)\n  //     .subscribe(task => this.task = task);\n  // }\n\n  onClose(): void {\n    this.task = null;\n    this.taskChange.emit(this.task);\n  }\n\n  // goBack(): void {\n  //   this.location.back();\n  // }\n\n  save(task: Task): void {\n    this.taskService.updateTask(this.task).subscribe(data => {\n      console.log(data);\n    });\n    //  .subscribe(() => this.goBack());\n  }\n}\n","<form class=\"taskForm\" state=\"visible\" *ngIf=\"task\">\n    <h2 class=\"taskTitle\">Редактирование</h2>\n    <input type=\"hidden\" name=id value=\"{{ task.id }}\">\n    <input type=\"text\" name=\"title\" placeholder=\"Имя задачи\" class=\"inputField\" [(ngModel)]=\"task.title\">\n    <textarea type=\"text\" name=\"description\" placeholder=\"Описание\" class=\"inputField\"\n        [(ngModel)]=\"task.description\"></textarea>\n    <input type=\"text\" name=\"user\" placeholder=\"ФИО\" class=\"inputField\" [(ngModel)]=\"task.user\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" class=\"inputField\" [(ngModel)]=\"task.email\">\n    <button type=\"confirm\" class=\"btn btnConfirm\" (click)=\"save(task)\">Принять</button>\n    <button type=\"button\" class=\"btn btnClose\" (click)=\"onClose()\">\n        <i class=\"fas fa-times\" aria-hidden=\"true\"></i>\n    </button>\n</form>","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Task } from './task';\nimport { Page } from './page';\n// import { TASKS } from './mock-tasks';\n// import { PAGES } from './mock-pages';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private taskUrl = 'api/gettasks/';\n  private createURL = 'api/createtask/';\n  private updateURL = 'api/updatetask/';\n  private removeURL = 'api/removetask/';\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService\n  ) { }\n\n  getTasks(params: any | undefined): Observable<Page> {\n    // this.messageService.add('TaskService: fetched tasks');\n    // console.log(params);\n    // let url = this.taskUrl;\n    // if (params.sortKey) {\n    //   url += `?sortKey=${params.sortKey}&sortWay=${params.sortWay}`;\n    // }\n    // if (params.page) {\n    //   if (params.sortKey) {\n    //     url += `&page=${params.page}`;\n    //   } else {\n    //     url += `?page=${params.page}`;\n    //   }\n    // }\n    // console.log('this.taskUrl', url);\n    const options = {\n      params: new HttpParams().set('page', params.page).set('sortKey', params.sortKey).set('sortWay', params.sortWay)\n    };\n    return this.http.get<Page>(this.taskUrl, options);\n    // return of(PAGES);\n  }\n\n  getTask(id: number): Observable<Task> {\n    const url = `${this.taskUrl}/${id}`;\n    // this.messageService.add(`TaskService: fetched task id=${id}`);\n    // return of(TASKS.find(task => task.id === id));\n    return this.http.get<Task>(url);\n  }\n\n  addTask(task: any): Observable<Task> {\n    console.log('before send', task);\n    return this.http.post<Task>(this.createURL, task, this.httpOptions);\n  }\n\n  updateTask(task: Task): Observable<Task> {\n    console.log('before send', task);\n    return this.http.post<Task>(this.updateURL, task, this.httpOptions);\n  }\n\n  deleteTask(task: Task | number): Observable<any> {\n    const id = typeof task === 'number' ? task : task.id;\n    console.log('delete task:', id);\n    return this.http.post<Task>(this.removeURL, { id }, this.httpOptions);\n    // return this.http.request('POST', this.removeURL, { id });\n  }\n\n  // private log(message: string) {\n  //   this.messageService.add(`TaskService: ${message}`);\n  // }\n\n  // private handleError<T>(operation = \"operation\", result?: T) {\n  //   return (error: any): Observable<T> => {\n  //     // TODO: send the error to remote logging infrastructure\n  //     console.error(error); // log to console instead\n\n  //     // TODO: better job of transforming error for user consumption\n  //     this.log(`${operation} failed: ${error.message}`);\n\n  //     // Let the app keep running by returning an empty result.\n  //     return of(result as T);\n  //   };\n  // }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Task } from '../task';\nimport { Page } from '../page';\nimport { TaskService } from '../task.service';\nimport { MessageService } from '../message.service';\nimport { title } from 'process';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})\nexport class TaskComponent implements OnInit {\n  tasks: Task[];\n  pageData: Page;\n  sortKey = 'title';\n  sortWay = 'inc';\n  page = 1;\n\n  selectedTask: Task;\n  isInserting: boolean;\n\n  constructor(\n    private taskService: TaskService,\n    // private messageService: MessageService\n  ) { }\n\n  ngOnInit(): void {\n    this.getTasks();\n  }\n\n  getTasks(): void {\n    const params = {\n      page: this.page,\n      sortKey: this.sortKey,\n      sortWay: this.sortWay\n    };\n    this.taskService.getTasks(params).subscribe((data) => {\n      console.log(data);\n      this.tasks = data.results;\n      this.pageData = data;\n    });\n  }\n\n  delete(task: Task): void {\n    this.tasks = this.tasks.filter(h => h !== task);\n    this.taskService.deleteTask(task).subscribe(data => {\n      console.log(data);\n    });\n  }\n\n  add(taskTitle: string, taskDescribe: string, taskUser: string, taskEmail: string): void {\n    // taskUser = taskUser.trim();\n    // taskEmail = taskEmail.trim();\n    console.log(taskTitle, taskDescribe, taskUser, taskEmail);\n\n    if (!taskTitle || !taskUser || !taskEmail) { return; }\n\n    const newtask = {\n      title: taskTitle,\n      description: taskDescribe,\n      user: taskUser,\n      email: taskEmail,\n    };\n    this.taskService.addTask({ newtask } as any)\n      .subscribe(task => {\n        this.tasks.push(task);\n        console.log(task);\n      });\n  }\n\n  onSelect(task: Task): void {\n    this.selectedTask = task;\n    // this.messageService.add(`TaskService: Selected task id=${task.id}`);\n  }\n\n  sort(key) {\n    if (key === this.sortKey) {\n      if (this.sortWay === 'inc') {\n        this.sortWay = 'dec';\n      } else {\n        this.sortWay = 'inc';\n      }\n    } else {\n      this.sortKey = key;\n      this.sortWay = 'inc';\n    }\n    this.page = 1;\n    this.getTasks();\n  }\n\n  onInsert(): void {\n    this.isInserting = true;\n  }\n\n  onClose(): void {\n    this.isInserting = false;\n    this.selectedTask = null;\n  }\n\n}\n","<h2 class=\"\">Список задач <button (click)=\"onInsert()\">+</button></h2>\n\n<div class=\"taskList\">\n\n    <nav class=\"menu taskMenu\">\n        <div class=\"menu__item\">\n            <button (click)=\"sort('status')\" class=\"menuBtn sortBtn\"><i class=\"fas fa-sort\"\n                    aria-hidden=\"true\"></i>Статус</button>\n        </div>\n        <div class=\"menu__item\">\n            <button (click)=\"sort('title')\" class=\"menuBtn sortBtn\"><i class=\"fas fa-sort\"\n                    aria-hidden=\"true\"></i>Заголовок</button>\n        </div>\n        <div class=\"menu__item\">\n            <button (click)=\"sort('user')\" class=\"menuBtn sortBtn\"><i class=\"fas fa-sort\"\n                    aria-hidden=\"true\"></i>Имя</button>\n        </div>\n        <div class=\"menu__item\">\n            <button (click)=\"sort('email')\" class=\"menuBtn sortBtn\"><i class=\"fas fa-sort\"\n                    aria-hidden=\"true\"></i>Email</button>\n        </div>\n        <div class=\"menu__item\">\n            <button (click)=\"sort('pub_date')\" class=\"menuBtn sortBtn\"><i class=\"fas fa-sort\"\n                    aria-hidden=\"true\"></i>Дата</button>\n        </div>\n    </nav>\n\n    <div class=\"task\" *ngFor=\"let task of tasks\">\n        <!-- <div class=\"task\" *ngFor=\"let task of tasks\" [class.task-opened]=\"task === openedTask\"> -->\n        <div class=\"taskHeader\">\n            <span class=\"taskHeader__item taskTitle\">{{ task.title }}</span>\n            <span class=\"taskHeader__item taskUser\">{{ task.user }}</span>\n            <span class=\"taskHeader__item taskEmail\">{{ task.email }}</span>\n            <!-- for link -->\n            <!--             <a class=\"btn taskHeader__item taskEdit\" routerLink=\"/detail/{{ task.id }}\">\n                edit\n                <i class=\"far fa-edit\" aria-hidden=\"true\"></i>\n            </a> -->\n            <button type=\"button\" class=\"btn taskHeader__item taskEdit\" (click)=\"onSelect(task)\">\n                edit\n                <i class=\"far fa-edit\" aria-hidden=\"true\"></i>\n            </button>\n            <button (click)=\"delete(task)\" type=\"button\" class=\"btn taskHeader__item taskRemove\">\n                remove\n                <i class=\"far fa-trash-alt\" aria-hidden=\"true\"></i>\n            </button>\n        </div>\n        <div class=\"taskBody\">\n            <div>{{ task.description }}</div>\n        </div>\n    </div>\n</div>\n\n<!-- commint on link -->\n<app-task-detail [task]=\"selectedTask\" (taskChange)=\"onClose()\"></app-task-detail>\n\n<form class=\" taskForm\" state=\"visible\" *ngIf=\"isInserting\">\n    <h2 class=\"taskTitle\">Добавление задачи</h2>\n    <input type=\"text\" name=\"title\" placeholder=\"Имя задачи\" class=\"inputField\" #taskTitle>\n    <textarea type=\"text\" name=\"description\" placeholder=\"Описание\" class=\"inputField\" #taskDescribe></textarea>\n    <input type=\"text\" name=\"user\" placeholder=\"ФИО\" class=\"inputField\" #taskUser>\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" class=\"inputField\" #taskEmail>\n    <button type=\"confirm\" class=\"btn btnConfirm\"\n        (click)=\"add(taskTitle.value, taskDescribe.value, taskUser.value, taskEmail.value)\">Создать</button>\n    <button type=\"button\" class=\"btn btnClose\" (click)=\"onClose()\">\n        <i class=\"fas fa-times\" aria-hidden=\"true\"></i>\n    </button>\n</form>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}