{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/message.service.ts","webpack:///src/app/task-detail/task-detail.component.ts","webpack:///src/app/task-detail/task-detail.component.html","webpack:///src/app/task.service.ts","webpack:///src/app/task/task.component.ts","webpack:///src/app/task/task.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DashboardComponent","taskService","tasks","sortKey","sortWay","page","getTasks","params","onMain","subscribe","data","console","log","results","pageData","task","isCofirmed","updateTask","selectedTask","onClose","MessageService","messages","message","push","providedIn","TaskDetailComponent","route","location","taskChange","event","key","emit","TaskService","http","messageService","taskUrl","createURL","updateURL","removeURL","httpOptions","headers","options","set","get","url","post","TaskComponent","prev","next","filter","h","deleteTask","taskTitle","taskDescribe","taskUser","taskEmail","taskConfirmed","taskOnMain","newtask","description","user","email","addTask","isInserting","onInsert","sort","environment","production","catch","err","error"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAOA,QAAMC,MAAM,GAAW,CACtB;AAAEC,UAAI,EAAE,EAAR;AAAYC,gBAAU,EAAE,YAAxB;AAAsCC,eAAS,EAAE;AAAjD,KADsB,EAEtB;AAAEF,UAAI,EAAE,WAAR;AAAqBG,eAAS,EAAE;AAAhC,KAFsB,EAGtB;AAAEH,UAAI,EAAE,UAAR;AAAoBG,eAAS,EAAE;AAA/B,KAHsB,EAItB;AAAEH,UAAI,EAAE,YAAR;AAAsBG,eAAS,EAAE;AAAjC,KAJsB,CAAvB;;QAWaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHnB,CAAC,6DAAaC,OAAb,CAAqBN,MAArB,CAAD,CAGmB,EAFlB,4DAEkB;;;;0HAAhBK,gB,EAAgB;AAAA;AAAA,kBAFlB,4DAEkB;AAAA,O;AAFN,K;;;;;sEAEVA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACTE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBN,MAArB,CAAD,CADA;AAETF,iBAAO,EAAE,CAAC,4DAAD;AAFA,S;AAImB,Q;;;;;;;;;;;;;;;;;;AClB7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,sE,CACA;;;QAOaU,Y,GALb;AAAA;;AAME,WAAAC,KAAA,GAAQ,gBAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,e;AAAA,a;AAAA,uL;AAAA;AAAA;ACRzB;;AACC;;AAMC;;AACC;;AAAqD;;AAAO;;AAC7D;;AACA;;AACC;;AAAoD;;AAAM;;AAC3D;;AACD;;AACD;;AAEA;;AACC;;AAAsB;;AAAW;;AACjC;;AACD;;;;AAFuB;;AAAA;;;;;;;;;sEDTVA,Y,EAAY;cALxB,uDAKwB;eALd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,kD,CAMA;AACA;AAKA;;;QAwBaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAJT,E;AAAE,gBATJ,CACP,uEADO,EAEP,0DAFO,EAGP,oEAHO,EAIP,qEAJO,CASI;;;;0HAIFA,S,EAAS;AAAA,uBAnBlB,2DAmBkB,EAlBlB,kEAkBkB,EAjBlB,sFAiBkB,EAhBlB;AACA,yFAekB;AAfA,kBAGlB,uEAHkB,EAIlB,0DAJkB,EAKlB,oEALkB,EAMlB,qEANkB;AAeA,O;AATF,K;;;;;sEASPA,S,EAAS;cArBrB,sDAqBqB;eArBZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,kEAFY,EAGZ,sFAHY,EAIZ;AACA,2FALY,CADN;AAQRP,iBAAO,EAAE,CACP,uEADO,EAEP,0DAFO,EAGP,oEAHO,EAIP,qEAJO,CARD;AAiBRQ,mBAAS,EAAE,EAjBH;AAkBR;AACAC,mBAAS,EAAE,CAAC,2DAAD;AAnBH,S;AAqBY,Q;;;;;;;;;;;;;;;;;;ACpCtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGC;;;;;;;;AAEC;;AACC;;AACC;;AAGC;;AAC8B;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAD9B;;AAEA;;AACD;;AACD;;AACA;;AAAkC;;AAAgB;;AAClD;;AACC;;AAA0C;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAyB;;AAAE;;AAEtE;;AACD;;;;;;AAf6C;;AAKnC;;AAAA,4GAAAjB,EAAA;;AACN;;AADmD;;AAE7C;;AAAA;;AAGyB;;AAAA;;;;;;AAVnC;;;;;;AAAkB;;;;;;AAkBlB;;AACC;;AACD;;MDrBF;;;QAOakB,kB;;;AASX,kCAAoBC,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AARpB,aAAAC,KAAA,GAAgB,EAAhB;AAIA,aAAAC,OAAA,GAAU,OAAV;AACA,aAAAC,OAAA,GAAU,KAAV;AACA,aAAAC,IAAA,GAAO,CAAP;AAEiD;;;;mCAEzC;AACN,eAAKC,QAAL;AACD;;;mCAEO;AAAA;;AACN,cAAMC,MAAM,GAAG;AACbF,gBAAI,EAAE,KAAKA,IADE;AAEbF,mBAAO,EAAE,KAAKA,OAFD;AAGbC,mBAAO,EAAE,KAAKA,OAHD;AAIbI,kBAAM,EAAE;AAJK,WAAf;AAMA,eAAKP,WAAL,CAAiBK,QAAjB,CAA0BC,MAA1B,EAAkCE,SAAlC,CAA4C,UAACC,IAAD,EAAU;AACpDC,mBAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,iBAAI,CAACR,KAAL,GAAaQ,IAAI,CAACG,OAAlB;AACA,iBAAI,CAACC,QAAL,GAAgBJ,IAAhB;AACD,WAJD;AAKD;;;6BAEIK,I,EAAU;AACb,cAAIA,IAAI,CAACC,UAAT,EAAqB;AACnBD,gBAAI,CAACC,UAAL,GAAkB,KAAlB;AACD,WAFD,MAEO;AACLD,gBAAI,CAACC,UAAL,GAAkB,IAAlB;AAAuB;AACxB;;AAED,eAAKf,WAAL,CAAiBgB,UAAjB,CAA4BF,IAA5B,EAAkCN,SAAlC,CAA4C,UAAAC,IAAI,EAAI;AAClDC,mBAAO,CAACC,GAAR,CAAYF,IAAZ,EADkD,CAElD;AAED,WAJD;AAKD;;;iCAEQK,I,EAAU;AACjB,eAAKG,YAAL,GAAoBH,IAApB,CADiB,CAEjB;AACD;;;kCAEM;AACL,eAAKG,YAAL,GAAoB,IAApB;AACD;;;;;;;uBAlDUlB,kB,EAAkB,0H;AAAA,K;;;YAAlBA,kB;AAAkB,oC;AAAA,c;AAAA,a;AAAA,kc;AAAA;AAAA;ACX/B;;AACC;;AAAI;;AAAe;;AAEnB;;AACA;;AAkBA;;AAKD;;AAGA;;AAAuC;AAAA,mBAAc,IAAAmB,OAAA,EAAd;AAAuB,WAAvB;;AAAyB;;;;;;;;AA3B1D;;AAAA,6FAAmD,UAAnD,EAAmD,IAAnD,EAAmD,UAAnD,EAAmD,IAAnD;;AA2BW;;AAAA;;;;;;;;;sEDnBJnB,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTP,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;AEX/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAKayB,c;;;AAHb;AAAA;;AAIE,aAAAC,QAAA,GAAqB,EAArB;AASD;;;;4BAPKC,O,EAAiB;AACnB,eAAKD,QAAL,CAAcE,IAAd,CAAmBD,OAAnB;AACD;;;gCAEO;AACN,eAAKD,QAAL,GAAgB,EAAhB;AACD;;;;;;;uBATUD,c;AAAc,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVI,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;ACL3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACAA;;AACI;;AAAsB;;AAAc;;AACpC;;AACA;;AAA4E;AAAA;;AAAA;;AAAA;AAAA;;AAA5E;;AACA;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AAA+B;;AACnC;;AAAoE;AAAA;;AAAA;;AAAA;AAAA;;AAApE;;AACA;;AAAwE;AAAA;;AAAA;;AAAA;AAAA;;AAAxE;;AAGA;;AACI;;AAAuC;AAAA;;AAAA;;AAAA;AAAA;;AAAvC;;AACA;;AACI;;AACJ;;AACJ;;AAEA;;AACI;;AAAuC;AAAA;;AAAA;;AAAA;AAAA;;AAAvC;;AACA;;AACI;;AACJ;;AACJ;;AAEA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAoB;;AAAM;;AAC5D;;AAA8C;AAAA;;AAAA;;AAAA;AAAA;;AAAqB;;AAAO;;AAC9E;;AAEA;;AAA2C;AAAA;;AAAA;;AAAA;AAAA;;AACvC;;AACJ;;AACJ;;;;;;AA9BiC;;AAAA;;AAC+C;;AAAA;;AAExE;;AAAA;;AACgE;;AAAA;;AACI;;AAAA;;AAI7B;;AAAA;;AAOA;;AAAA;;;;QDJlCC,mB;;;AAUX,mCACUC,KADV,EAEUzB,WAFV,EAGU0B,QAHV,EAG4B;AAAA;;AAFlB,aAAAD,KAAA,GAAAA,KAAA;AACA,aAAAzB,WAAA,GAAAA,WAAA;AACA,aAAA0B,QAAA,GAAAA,QAAA;AAXA,aAAAC,UAAA,GAAgC,IAAI,0DAAJ,EAAhC;AAYL;;;;sCAVSC,K,EAAsB;AAClC,cAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AAC1B,iBAAKX,OAAL;AACD;AACF;;;mCAQO,CAAY;;;kCAEb;AACL,eAAKJ,IAAL,GAAY,IAAZ;AACA,eAAKa,UAAL,CAAgBG,IAAhB,CAAqB,KAAKhB,IAA1B;AACD;;;6BAEIA,I,EAAU;AACb,eAAKd,WAAL,CAAiBgB,UAAjB,CAA4B,KAAKF,IAAjC,EAAuCN,SAAvC,CAAiD,UAAAC,IAAI,EAAI;AACvDC,mBAAO,CAACC,GAAR,CAAYF,IAAZ,EADuD,CAEvD;AAED,WAJD;AAKD;;;;;;;uBA7BUe,mB,EAAmB,+H,EAAA,0H,EAAA,yH;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA;AAAA;;;;;;;;;;;;;;;;;ACdhC;;;;AAAuC;;;;;;;;;sEDc1BA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACThC,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;gBAC7B;;;gBACA;;;gBACA,0D;iBAAa,gB,EAAkB,CAAC,QAAD,C;;;;;;;;;;;;;;;;;;;;AEjBlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,oC,CASA;AACA;;;QAKaqC,W;;;AAUX,2BACUC,IADV,EAEUC,cAFV,EAEwC;AAAA;;AAD9B,aAAAD,IAAA,GAAAA,IAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AAXF,aAAAC,OAAA,GAAU,eAAV;AACA,aAAAC,SAAA,GAAY,iBAAZ;AACA,aAAAC,SAAA,GAAY,iBAAZ;AACA,aAAAC,SAAA,GAAY,iBAAZ;AAER,aAAAC,WAAA,GAAc;AACZC,iBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,4BAAgB;AAAlB,WAAhB;AADG,SAAd;AAOK;;;;iCAEIjC,M,EAAuB;AAC9B,cAAMkC,OAAO,GAAG;AACdlC,kBAAM,EAAE;AADM,WAAhB;;AAIA,cAAIA,MAAM,CAACC,MAAX,EAAmB;AACjBiC,mBAAO,CAAClC,MAAR,GAAiB,IAAI,+DAAJ,GACdmC,GADc,CACV,MADU,EACFnC,MAAM,CAACF,IADL,EACWqC,GADX,CACe,SADf,EAC0BnC,MAAM,CAACJ,OADjC,EAEduC,GAFc,CAEV,SAFU,EAECnC,MAAM,CAACH,OAFR,EAEiBsC,GAFjB,CAEqB,QAFrB,EAE+BnC,MAAM,CAACC,MAFtC,CAAjB;AAGD,WAJD,MAIO;AACLiC,mBAAO,CAAClC,MAAR,GAAiB,IAAI,+DAAJ,GAAiBmC,GAAjB,CAAqB,MAArB,EAA6BnC,MAAM,CAACF,IAApC,EAA0CqC,GAA1C,CAA8C,SAA9C,EAAyDnC,MAAM,CAACJ,OAAhE,EAAyEuC,GAAzE,CAA6E,SAA7E,EAAwFnC,MAAM,CAACH,OAA/F,CAAjB;AACD;;AACDO,iBAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB6B,OAAvB;AACA,iBAAO,KAAKR,IAAL,CAAUU,GAAV,CAAoB,KAAKR,OAAzB,EAAkCM,OAAlC,CAAP,CAb8B,CAc9B;AACD;;;gCAEO3D,E,EAAU;AAChB,cAAM8D,GAAG,aAAM,KAAKT,OAAX,cAAsBrD,EAAtB,CAAT,CADgB,CAEhB;AACA;;AACA,iBAAO,KAAKmD,IAAL,CAAUU,GAAV,CAAoBC,GAApB,CAAP;AACD;;;gCAEO7B,I,EAAS;AACfJ,iBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BG,IAA3B;AACA,iBAAO,KAAKkB,IAAL,CAAUY,IAAV,CAAqB,KAAKT,SAA1B,EAAqCrB,IAArC,EAA2C,KAAKwB,WAAhD,CAAP;AACD;;;mCAEUxB,I,EAAU;AACnBJ,iBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BG,IAA3B;AACA,iBAAO,KAAKkB,IAAL,CAAUY,IAAV,CAAqB,KAAKR,SAA1B,EAAqCtB,IAArC,EAA2C,KAAKwB,WAAhD,CAAP;AACD;;;mCAEUxB,I,EAAmB;AAC5B,cAAMjC,EAAE,GAAG,OAAOiC,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACjC,EAAlD;AACA6B,iBAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B9B,EAA5B;AACA,iBAAO,KAAKmD,IAAL,CAAUY,IAAV,CAAqB,KAAKP,SAA1B,EAAqC;AAAExD,cAAE,EAAFA;AAAF,WAArC,EAA6C,KAAKyD,WAAlD,CAAP;AACD;;;;;;;uBArDUP,W,EAAW,uH,EAAA,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVR,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;;;ACfxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC8BA;;;;;;;;AAEI;;AACI;;AACI;;AAAyC;;AAAgB;;AACzD;;AAAwC;;AAAe;;AACvD;;AAAyC;;AAAgB;;AACzD;;AAAwC;;AAAmB;;AAE3D;;AACI;;AAA2C;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACvC;;AACJ;;AACA;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AAAK;;AAAsB;;AAC/B;;AACJ;;;;;;AAjBiD;;AAAA;;AACD;;AAAA;;AACC;;AAAA;;AACD;;AAAA;;AAYnC;;AAAA;;;;;;AAjBb;;;;;;AAAkB;;;;;;AAuBlB;;AACI;;AACJ;;;;;;;;AAMJ;;AACI;;AAAsB;;AAAiB;;AACvC;;AACA;;AACA;;AACA;;AAEA;;AACI;;AACA;;AACI;;AACJ;;AACJ;;AAEA;;AACI;;AACA;;AACI;;AACJ;;AACJ;;AAEA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAoB;;AAAM;;AAC5D;;AACI;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA,uBAA2I,EAA3I;AAA+I,cAAF,MAAE,GAAmB,EAAnB;AAAuB,cAAF,MAAE,GAAe,EAAf;AAAmB,cAAF,MAAE,GAAgB,EAAhB;AAAoB,cAAF,MAAE,GAAoB,EAApB;AAAwB,iBAAF,aAAmB,EAAjB;AAAmB,SAAxP;;AAA0P;;AAAO;;AACzQ;;AAEA;;AAA2C;AAAA;;AAAA;;AAAA;AAAA;;AACvC;;AACJ;;AACJ;;;;;;;;AAGI;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAoD;;AAAI;;AAC9F;;;;;;;;AAIA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAkD;;AAAI;;AAC5F;;;;;;AATJ;;AACI;;AAGA;;AACI;;AAAgC;;AAAU;;AAC9C;;AACA;;AAGJ;;;;;;AATkC;;AAAA;;AAIM;;AAAA;;AAEN;;AAAA;;MDhGlC;;;QAOasB,a;;;AAsBX,6BACU7C,WADV,EACkC;AAAA;;AAAxB,aAAAA,WAAA,GAAAA,WAAA;AAtBV,aAAAC,KAAA,GAAgB,EAAhB,CAsBkC,CArBlC;AACA;;AACA,aAAAC,OAAA,GAAU,OAAV;AACA,aAAAC,OAAA,GAAU,KAAV;AACA,aAAAC,IAAA,GAAO,CAAP;AACA,aAAA0C,IAAA,GAAO,IAAP;AACA,aAAAC,IAAA,GAAO,IAAP;AAiBK,O,CAXL;;;;;sCAEcnB,K,EAAsB;AAClC,cAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AAC1B,iBAAKX,OAAL;AACD;AACF;;;mCAOO;AACN,eAAKb,QAAL;AACD;;;mCAEO;AAAA;;AACN,cAAMC,MAAM,GAAG;AACbF,gBAAI,EAAE,KAAKA,IADE;AAEbF,mBAAO,EAAE,KAAKA,OAFD;AAGbC,mBAAO,EAAE,KAAKA;AAHD,WAAf;AAKA,eAAKH,WAAL,CAAiBK,QAAjB,CAA0BC,MAA1B,EAAkCE,SAAlC,CAA4C,UAACC,IAAD,EAAU;AACpDC,mBAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,kBAAI,CAACR,KAAL,GAAaQ,IAAI,CAACG,OAAlB;AACA,kBAAI,CAACR,IAAL,GAAYK,IAAI,CAACL,IAAjB;AACA,kBAAI,CAAC0C,IAAL,GAAYrC,IAAI,CAACqC,IAAjB;AACA,kBAAI,CAACC,IAAL,GAAYtC,IAAI,CAACsC,IAAjB;AACD,WAND;AAOD;;;gCAEMjC,I,EAAU;AACf,eAAKb,KAAL,GAAa,KAAKA,KAAL,CAAW+C,MAAX,CAAkB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,KAAKnC,IAAV;AAAA,WAAnB,CAAb;AACA,eAAKd,WAAL,CAAiBkD,UAAjB,CAA4BpC,IAA5B,EAAkCN,SAAlC,CAA4C,UAAAC,IAAI,EAAI;AAClDC,mBAAO,CAACC,GAAR,CAAYF,IAAZ,EADkD,CAElD;AAED,WAJD;AAKD;;;4BAEG0C,S,EAAmBC,Y,EAAsBC,Q,EAAkBC,S,EAAmBC,a,EAAoBC,U,EAAe;AAAA;;AACnH9C,iBAAO,CAACC,GAAR,CAAYwC,SAAZ,EAAuBC,YAAvB,EAAqCC,QAArC,EAA+CC,SAA/C,EAA0DC,aAA1D,EAAyEC,UAAzE;;AAEA,cAAI,CAACL,SAAD,IAAc,CAACE,QAAf,IAA2B,CAACC,SAAhC,EAA2C;AAAE;AAAS;;AAEtD,cAAMG,OAAO,GAAG;AACdlE,iBAAK,EAAE4D,SADO;AAEdO,uBAAW,EAAEN,YAFC;AAGdO,gBAAI,EAAEN,QAHQ;AAIdO,iBAAK,EAAEN,SAJO;AAKdvC,sBAAU,EAAEwC,aALE;AAMdhD,kBAAM,EAAEiD;AANM,WAAhB,CALmH,CAcnH;;AACA,eAAKxD,WAAL,CAAiB6D,OAAjB,CAAyB;AAAEJ,mBAAO,EAAPA;AAAF,WAAzB,EACGjD,SADH,CACa,UAAAM,IAAI,EAAI;AACjB,kBAAI,CAACb,KAAL,CAAWqB,IAAX,CAAgBR,IAAhB;;AACAJ,mBAAO,CAACC,GAAR,CAAYG,IAAZ;AACD,WAJH;AAKD;;;iCAEQA,I,EAAU;AACjB,eAAKG,YAAL,GAAoBH,IAApB,CADiB,CAEjB;AACD;;;6BAEIe,G,EAAK;AACR,cAAIA,GAAG,KAAK,KAAK3B,OAAjB,EAA0B;AACxB,gBAAI,KAAKC,OAAL,KAAiB,KAArB,EAA4B;AAC1B,mBAAKA,OAAL,GAAe,KAAf;AACD,aAFD,MAEO;AACL,mBAAKA,OAAL,GAAe,KAAf;AACD;AACF,WAND,MAMO;AACL,iBAAKD,OAAL,GAAe2B,GAAf;AACA,iBAAK1B,OAAL,GAAe,KAAf;AACD;;AACD,eAAKC,IAAL,GAAY,CAAZ;AACA,eAAKC,QAAL;AACD;;;gCAEOD,I,EAAM;AACZ,eAAKA,IAAL,GAAYA,IAAZ;AACA,eAAKC,QAAL;AACD;;;mCAEO;AACN,eAAKyD,WAAL,GAAmB,IAAnB;AACD;;;kCAEM;AACL,eAAKA,WAAL,GAAmB,KAAnB;AACA,eAAK7C,YAAL,GAAoB,IAApB;AACD;;;;;;;uBA7GU4B,a,EAAa,0H;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA;AAAA;;;;;;;;;;;ACb1B;;AAAa;;AAAa;;AAA0B;AAAA,mBAAS,IAAAkB,QAAA,EAAT;AAAmB,WAAnB;;AAC5C;;AACJ;;AAAS;;AAGb;;AAKI;;AACI;;AAAQ;AAAA,mBAAS,IAAAC,IAAA,CAAK,OAAL,CAAT;AAAsB,WAAtB;;AACJ;;AAA8C;;AAAS;;AAC/D;;AACA;;AACI;;AAAQ;AAAA,mBAAS,IAAAA,IAAA,CAAK,MAAL,CAAT;AAAqB,WAArB;;AACJ;;AAA8C;;AAAG;;AACzD;;AACA;;AACI;;AAAQ;AAAA,mBAAS,IAAAA,IAAA,CAAK,OAAL,CAAT;AAAsB,WAAtB;;AACJ;;AAA8C;;AAAK;;AAC3D;;AACA;;AACI;;AAAQ;AAAA,mBAAS,IAAAA,IAAA,CAAK,UAAL,CAAT;AAAyB,WAAzB;;AACJ;;AAA8C;;AAAI;;AAC1D;;AACA;;AAGJ;;AACA;;AACA;;AAuBA;;AAOA;;AAAuC;AAAA,mBAAc,IAAA9C,OAAA,EAAd;AAAuB,WAAvB;;AAAyB;;AAEhE;;AAgCA;;;;;;;;AAjEsB;;AAAA,6FAAmD,UAAnD,EAAmD,GAAnD,EAAmD,UAAnD,EAAmD,GAAnD;;AA+BL;;AAAA;;AAEuB;;AAAA;;AAgChB;;AAAA;;;;;;;;;sEDlFX2B,a,EAAa;cALzB,uDAKyB;eALf;AACTrD,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKe,Q;;;;;;gBAevB,0D;iBAAa,gB,EAAkB,CAAC,QAAD,C;;;;;;;;;;;;;;;;;;;;AE5BlC;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMuE,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAwB,eAAxB,CACmB,yDADnB,EAEGC,KAFH,CAES,UAAAC,GAAG;AAAA,aAAI1D,OAAO,CAAC2D,KAAR,CAAcD,GAAd,CAAJ;AAAA,KAFZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TaskComponent } from './task/task.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { TaskDetailComponent } from './task-detail/task-detail.component';\n\nconst routes: Routes = [\n\t{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\t{ path: 'dashboard', component: DashboardComponent },\n\t{ path: 'tasklist', component: TaskComponent },\n\t{ path: 'detail/:id', component: TaskDetailComponent },\n];\n\n@NgModule({\n\timports: [RouterModule.forRoot(routes)],\n\texports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n// import { HostListener, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Менеджер задач';\n}\n","<header>\n\t<nav class=\"menu mainMenu\">\n\t\t<!-- <div class=\"menu__item menuBrand\">\n\t    \t<a routerLink=\"/\" class=\"menuItem__content\">\n\t    \t\t<i class=\"fas fa-home\"></i>\n\t    \t</a>\n\t    </div> -->\n\t\t<div class=\"menu__item\">\n\t\t\t<a routerLink=\"/dashboard\" class=\"menuItem__content\">Главная</a>\n\t\t</div>\n\t\t<div class=\"menu__item\">\n\t\t\t<a routerLink=\"/tasklist\" class=\"menuItem__content\">Задачи</a>\n\t\t</div>\n\t</nav>\n</header>\n\n<main>\n\t<h1 class=\"pageTitle\">{{ title }}</h1>\n\t<router-outlet></router-outlet>\n</main>\n\n<!-- <app-messages></app-messages> -->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\n// import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\n// import { InMemoryDataService } from './in-memory-data.service';\n\nimport { AppComponent } from './app.component';\nimport { TaskComponent } from './task/task.component';\nimport { TaskDetailComponent } from './task-detail/task-detail.component';\n// import { MessagesComponent } from './messages/messages.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TaskComponent,\n    TaskDetailComponent,\n    // MessagesComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    // HttpClientInMemoryWebApiModule.forRoot(InMemoryDataService, {\n    //   dataEncapsulation: false\n    // })\n  ],\n  providers: [],\n  // providers: [{provide: APP_BASE_HREF, useValue : '/' }]\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Task } from '../task';\nimport { Page } from '../page';\nimport { TaskService } from '../task.service';\n// import { TASKS } from '../mock-tasks'; // remove on prod\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  tasks: Task[] = [];\n  // tasks: Task[] = TASKS;\n  selectedTask: Task;\n  pageData: Page;\n  sortKey = 'title';\n  sortWay = 'inc';\n  page = 1;\n\n  constructor(private taskService: TaskService) { }\n\n  ngOnInit(): void {\n    this.getTasks();\n  }\n\n  getTasks(): void {\n    const params = {\n      page: this.page,\n      sortKey: this.sortKey,\n      sortWay: this.sortWay,\n      onMain: true,\n    };\n    this.taskService.getTasks(params).subscribe((data) => {\n      console.log(data);\n      this.tasks = data.results;\n      this.pageData = data;\n    });\n  }\n\n  save(task: Task): void {\n    if (task.isCofirmed) {\n      task.isCofirmed = false;\n    } else {\n      task.isCofirmed = true;;\n    }\n\n    this.taskService.updateTask(task).subscribe(data => {\n      console.log(data);\n      // notify\n\n    });\n  }\n\n  onSelect(task: Task): void {\n    this.selectedTask = task;\n    // this.messageService.add(`TaskService: Selected task id=${task.id}`);\n  }\n\n  onClose(): void {\n    this.selectedTask = null;\n  }\n}\n","<section>\n\t<h2>Основные задачи</h2>\n\t<!-- <nav class=\"taskInfo\">Выполнено: 0/3</nav> -->\n\t<div *ngIf=\"tasks.length; then thenBlock else elseBlock\"></div>\n\t<ng-template #thenBlock>\n\t\t<div class=\"task\" *ngFor=\"let task of tasks\" [class.task-confirmed]=\"task.isCofirmed\">\n\t\t\t<div class=\"taskValue taskState\">\n\t\t\t\t<div class=\"check\">\n\t\t\t\t\t<!-- <input id=\"changeStatus{{task.id}}\" type=\"checkbox\" [(ngModel)]=\"task.isCofirmed\"\n\t\t\t\t\t\tname=\"isCofirmed{{task.id}}\" (change)=\"save(task)\"> -->\n\t\t\t\t\t<input id=\"changeStatus{{task.id}}\" type=\"checkbox\" [checked]=\"task.isCofirmed\"\n\t\t\t\t\t\tname=\"isCofirmed{{task.id}}\" (change)=\"save(task)\">\n\t\t\t\t\t<label for=\"changeStatus{{task.id}}\"></label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<span class=\"taskValue taskTitle\">{{ task.title }}</span>\n\t\t\t<div class=\"taskValue taskControl\">\n\t\t\t\t<button type=\"button\" class=\"taskDetails\" (click)=\"onSelect(task)\">-></button>\n\t\t\t\t<!-- <a type=\"button\" class=\"taskDetails\" routerLink=\"/detail/{{ task.id }}\">-></a> -->\n\t\t\t</div>\n\t\t</div>\n\t</ng-template>\n\t<ng-template #elseBlock>\n\t\t<div class=\"task task-empty\">\n\t\t\tСписок задач пуст\n\t\t</div>\n\t</ng-template>\n</section>\n\n<!-- commint on link -->\n<app-task-detail [task]=\"selectedTask\" (taskChange)=\"onClose()\"></app-task-detail>","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n","import { HostListener, Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n// for work with link\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\n\nimport { Task } from '../task';\nimport { TaskService } from '../task.service';\n\n@Component({\n  selector: 'app-task-detail',\n  templateUrl: './task-detail.component.html',\n  styleUrls: ['./task-detail.component.scss'],\n})\nexport class TaskDetailComponent implements OnInit {\n  @Input() task: Task;\n  @Output() taskChange: EventEmitter<any> = new EventEmitter<any>();\n  @HostListener('window:keydown', ['$event'])\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Escape') {\n      this.onClose();\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private taskService: TaskService,\n    private location: Location\n  ) { }\n\n  ngOnInit(): void { }\n\n  onClose(): void {\n    this.task = null;\n    this.taskChange.emit(this.task);\n  }\n\n  save(task: Task): void {\n    this.taskService.updateTask(this.task).subscribe(data => {\n      console.log(data);\n      // notify\n\n    });\n  }\n}\n","<form class=\"taskForm\" state=\"visible\" *ngIf=\"task\">\n    <h2 class=\"taskTitle\">Редактирование</h2>\n    <input type=\"hidden\" name=id value=\"{{ task.id }}\" required>\n    <input type=\"text\" name=\"title\" placeholder=\"Имя задачи\" class=\"inputField\" [(ngModel)]=\"task.title\">\n    <textarea type=\"text\" name=\"description\" placeholder=\"Описание\" class=\"inputField\"\n        [(ngModel)]=\"task.description\"></textarea>\n    <input type=\"text\" name=\"user\" placeholder=\"ФИО\" class=\"inputField\" [(ngModel)]=\"task.user\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" class=\"inputField\" [(ngModel)]=\"task.email\">\n\n\n    <div class=\"check\">\n        <input id=\"editStatus\" type=\"checkbox\" [(ngModel)]=\"task.isCofirmed\" name=\"isCofirmed\">\n        <label for=\"editStatus\">\n            выполнена\n        </label>\n    </div>\n\n    <div class=\"check\">\n        <input id=\"editOnMain\" type=\"checkbox\" [(ngModel)]=\"task.onMain\" name=\"onMain\">\n        <label for=\"editOnMain\">\n            показывать на главной\n        </label>\n    </div>\n\n    <div class=\"btnGroup\">\n        <button type=\"button\" class=\"btn\" (click)=\"onClose()\">Отмена</button>\n        <button type=\"confirm\" class=\"btn btnConfirm\" (click)=\"save(task)\">Принять</button>\n    </div>\n\n    <button type=\"button\" class=\"btn btnClose\" (click)=\"onClose()\" title=\"Закрыть\">\n        <i class=\"fas fa-times\" aria-hidden=\"true\"></i>\n    </button>\n</form>","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Task } from './task';\nimport { Page } from './page';\n// import { TASKS } from './mock-tasks';\n// import { PAGES } from './mock-pages';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private taskUrl = 'api/gettasks/';\n  private createURL = 'api/createtask/';\n  private updateURL = 'api/updatetask/';\n  private removeURL = 'api/removetask/';\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService\n  ) { }\n\n  getTasks(params: any | undefined): Observable<Page> {\n    const options = {\n      params: null\n    };\n\n    if (params.onMain) {\n      options.params = new HttpParams()\n        .set('page', params.page).set('sortKey', params.sortKey)\n        .set('sortWay', params.sortWay).set('onMain', params.onMain);\n    } else {\n      options.params = new HttpParams().set('page', params.page).set('sortKey', params.sortKey).set('sortWay', params.sortWay);\n    }\n    console.log('options', options);\n    return this.http.get<Page>(this.taskUrl, options);\n    // return of(PAGES);\n  }\n\n  getTask(id: number): Observable<Task> {\n    const url = `${this.taskUrl}/${id}`;\n    // this.messageService.add(`TaskService: fetched task id=${id}`);\n    // return of(TASKS.find(task => task.id === id));\n    return this.http.get<Task>(url);\n  }\n\n  addTask(task: any): Observable<Task> {\n    console.log('before send', task);\n    return this.http.post<Task>(this.createURL, task, this.httpOptions);\n  }\n\n  updateTask(task: Task): Observable<Task> {\n    console.log('before send', task);\n    return this.http.post<Task>(this.updateURL, task, this.httpOptions);\n  }\n\n  deleteTask(task: Task | number): Observable<any> {\n    const id = typeof task === 'number' ? task : task.id;\n    console.log('delete task:', id);\n    return this.http.post<Task>(this.removeURL, { id }, this.httpOptions);\n  }\n\n  // private log(message: string) {\n  //   this.messageService.add(`TaskService: ${message}`);\n  // }\n\n  // private handleError<T>(operation = \"operation\", result?: T) {\n  //   return (error: any): Observable<T> => {\n  //     // TODO: send the error to remote logging infrastructure\n  //     console.error(error); // log to console instead\n\n  //     // TODO: better job of transforming error for user consumption\n  //     this.log(`${operation} failed: ${error.message}`);\n\n  //     // Let the app keep running by returning an empty result.\n  //     return of(result as T);\n  //   };\n  // }\n}\n","import { HostListener, Component, OnInit } from '@angular/core';\n// import { MessageService } from '../message.service';\n\nimport { Task } from '../task';\n// import { Page } from '../page';\nimport { TaskService } from '../task.service';\n// import { TASKS } from '../mock-tasks'; // remove on prod\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})\nexport class TaskComponent implements OnInit {\n  tasks: Task[] = [];\n  // tasks: Task[] = TASKS; // remove on prod\n  // pageData: Page;\n  sortKey = 'title';\n  sortWay = 'inc';\n  page = 1;\n  prev = null;\n  next = null;\n\n\n  selectedTask: Task;\n  isInserting: boolean;\n\n  // for createform\n  @HostListener('window:keydown', ['$event'])\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Escape') {\n      this.onClose();\n    }\n  }\n\n  constructor(\n    private taskService: TaskService,\n    // private messageService: MessageService\n  ) { }\n\n  ngOnInit(): void {\n    this.getTasks();\n  }\n\n  getTasks(): void {\n    const params = {\n      page: this.page,\n      sortKey: this.sortKey,\n      sortWay: this.sortWay\n    };\n    this.taskService.getTasks(params).subscribe((data) => {\n      console.log(data);\n      this.tasks = data.results;\n      this.page = data.page;\n      this.prev = data.prev;\n      this.next = data.next;\n    });\n  }\n\n  delete(task: Task): void {\n    this.tasks = this.tasks.filter(h => h !== task);\n    this.taskService.deleteTask(task).subscribe(data => {\n      console.log(data);\n      // notify\n\n    });\n  }\n\n  add(taskTitle: string, taskDescribe: string, taskUser: string, taskEmail: string, taskConfirmed: any, taskOnMain: any): void {\n    console.log(taskTitle, taskDescribe, taskUser, taskEmail, taskConfirmed, taskOnMain);\n\n    if (!taskTitle || !taskUser || !taskEmail) { return; }\n\n    const newtask = {\n      title: taskTitle,\n      description: taskDescribe,\n      user: taskUser,\n      email: taskEmail,\n      isCofirmed: taskConfirmed,\n      onMain: taskOnMain,\n    };\n\n    // notify\n    this.taskService.addTask({ newtask } as any)\n      .subscribe(task => {\n        this.tasks.push(task);\n        console.log(task);\n      });\n  }\n\n  onSelect(task: Task): void {\n    this.selectedTask = task;\n    // this.messageService.add(`TaskService: Selected task id=${task.id}`);\n  }\n\n  sort(key) {\n    if (key === this.sortKey) {\n      if (this.sortWay === 'inc') {\n        this.sortWay = 'dec';\n      } else {\n        this.sortWay = 'inc';\n      }\n    } else {\n      this.sortKey = key;\n      this.sortWay = 'inc';\n    }\n    this.page = 1;\n    this.getTasks();\n  }\n\n  setPage(page) {\n    this.page = page;\n    this.getTasks();\n  }\n\n  onInsert(): void {\n    this.isInserting = true;\n  }\n\n  onClose(): void {\n    this.isInserting = false;\n    this.selectedTask = null;\n  }\n\n}\n","<h2 class=\"\">Список задач <button class=\"createBtn\" (click)=\"onInsert()\" title=\"Создать задачу\">\n        <i class=\"fas fa-plus\"></i>\n    </button></h2>\n\n\n<nav class=\"menu taskMenu\">\n    <!-- <div class=\"menu__item\">\n        <button (click)=\"sort('status')\" class=\"menuBtn sortBtn\" title=\"Сортировка по статусу\">\n            <i class=\"fas fa-sort\" aria-hidden=\"true\"></i>Статус</button>\n    </div> -->\n    <div class=\"menu__item taskTitle\">\n        <button (click)=\"sort('title')\" class=\"menuBtn sortBtn\" title=\"Сортировка по заголовку\">\n            <i class=\"fas fa-sort\" aria-hidden=\"true\"></i>Заголовок</button>\n    </div>\n    <div class=\"menu__item taskUser\">\n        <button (click)=\"sort('user')\" class=\"menuBtn sortBtn\" title=\"Сортировка по имени\">\n            <i class=\"fas fa-sort\" aria-hidden=\"true\"></i>Имя</button>\n    </div>\n    <div class=\"menu__item taskEmail\">\n        <button (click)=\"sort('email')\" class=\"menuBtn sortBtn\" title=\"Сортировка по почте\">\n            <i class=\"fas fa-sort\" aria-hidden=\"true\"></i>Email</button>\n    </div>\n    <div class=\"menu__item taskDate\">\n        <button (click)=\"sort('pub_date')\" class=\"menuBtn sortBtn\" title=\"Сортировка по дате\">\n            <i class=\"fas fa-sort\" aria-hidden=\"true\"></i>Дата</button>\n    </div>\n    <div class=\"menu__item taskDate\">\n        <!-- <button>Результатов на страницу</button> -->\n    </div>\n</nav>\n<div class=\"taskList\" *ngIf=\"tasks.length; then thenBlock else elseBlock\"></div>\n<ng-template #thenBlock>\n    <div class=\"task\" *ngFor=\"let task of tasks\">\n        <div class=\"taskHeader\">\n            <span class=\"taskHeader__item taskTitle\">{{ task.title }}</span>\n            <span class=\"taskHeader__item taskUser\">{{ task.user }}</span>\n            <span class=\"taskHeader__item taskEmail\">{{ task.email }}</span>\n            <span class=\"taskHeader__item taskDate\">{{ task.pub_date }}</span>\n\n            <div class=\"taskHeader__item btnGroup taskDate\">\n                <button type=\"button\" class=\"btn taskEdit\" (click)=\"onSelect(task)\" title=\"Изменить\">\n                    <i class=\"far fa-edit\" aria-hidden=\"true\"></i>\n                </button>\n                <button (click)=\"delete(task)\" type=\"button\" class=\"btn taskRemove\" title=\"Удалить\">\n                    <i class=\"far fa-trash-alt\" aria-hidden=\"true\"></i>\n                </button>\n            </div>\n        </div>\n        <div class=\"taskBody\">\n            <div>{{ task.description }}</div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #elseBlock>\n    <div class=\"task task-empty\">\n        Список задач пуст\n    </div>\n</ng-template>\n\n<!-- commint on link -->\n<app-task-detail [task]=\"selectedTask\" (taskChange)=\"onClose()\"></app-task-detail>\n\n<form class=\" taskForm\" state=\"visible\" *ngIf=\"isInserting\">\n    <h2 class=\"taskTitle\">Добавление задачи</h2>\n    <input type=\"text\" name=\"title\" placeholder=\"Имя задачи\" class=\"inputField\" #taskTitle required>\n    <textarea type=\"text\" name=\"description\" placeholder=\"Описание\" class=\"inputField\" #taskDescribe></textarea>\n    <input type=\"text\" name=\"user\" placeholder=\"ФИО\" class=\"inputField\" #taskUser>\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" class=\"inputField\" #taskEmail>\n\n    <div class=\"check\">\n        <input id=\"editStatus\" type=\"checkbox\" #taskConfirmed>\n        <label for=\"editStatus\">\n            выполнена\n        </label>\n    </div>\n\n    <div class=\"check\">\n        <input id=\"editOnMain\" type=\"checkbox\" #taskOnMain>\n        <label for=\"editOnMain\">\n            показывать на главной\n        </label>\n    </div>\n\n    <div class=\"btnGroup\">\n        <button type=\"button\" class=\"btn\" (click)=\"onClose()\">Отмена</button>\n        <button type=\"confirm\" class=\"btn btnConfirm\"\n            (click)=\"add(taskTitle.value, taskDescribe.value, taskUser.value, taskEmail.value, taskConfirmed.value, taskOnMain.value); taskTitle.value=''; taskDescribe.value=''; taskUser.value=''; taskEmail.value=''; taskConfirmed.value=''; taskOnMain.value=''\">Создать</button>\n    </div>\n\n    <button type=\"button\" class=\"btn btnClose\" (click)=\"onClose()\" title=\"Закрыть\">\n        <i class=\"fas fa-times\" aria-hidden=\"true\"></i>\n    </button>\n</form>\n\n<nav class=\"pagination\" *ngIf=\"prev || next\">\n    <div class=\"pagination__item\" *ngIf=\"prev\">\n        <button class=\"paginationContent\" (click)=\"setPage(prev)\" title=\"Предыдущая страница\">prev</button>\n    </div>\n    <div class=\"pagination__item\">\n        <span class=\"paginationContent\">{{ page }}</span>\n    </div>\n    <div class=\"pagination__item\" *ngIf=\"next\">\n        <button class=\"paginationContent\" (click)=\"setPage(next)\" title=\"Следущая страница\">next</button>\n    </div>\n</nav>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}